## 문제 12.
## 다음과 같은 특성을 갖는 숫자의 개수를 찾는 기능을 구현합니다.
## 입력으로 두개의 숫자( x, y )를 이용합니다.
## - 두 개의 숫자 x와 y를 이용하여,
##   x초과 y미만의 숫자 중 각 자리의 숫자를 모두 더한 값이 5의 배수가
##   되는 숫자를 찾습니다.
## - 숫자들을 모두 찾은 후 해당 숫자가 총 몇 개인지를 출력합니다.

## 예1) 두 개의 숫자 1과 100이 주어졌을 경우,
##      1초과 100미만의 숫자 중 각 자리의 숫자를 모두 더한 값이 5의 배수가
##      되는 숫자를 찾습니다.
##      - 20의 경우 각 자리 숫자를 모두 더한 값이 2이므로, 적합하지 않다.
##      - 23의 경우 각 자리 숫자를 모두 더한 값이 5이므로, 적합하다.
##      [총 개수] 19

## 예2) 두 개의 숫자 5와 500이 주어졌을 경우,
##      5초과 500미만의 숫자 중 각 자리의 숫자를 모두 더한 값이 5의 배수가
##      되는 숫자를 찾습니다.
##      [총 개수] 98

## 입력으로 주어지는 두 개의 수 : 100 10000
# x = input("x를 입력하십시오")
# y = input("y를 입력하십시오")
x= 101
y= 10000

result=[]
for i in range(x, y):
    i_str = str(i)
    sum = 0
    for n in i_str:
        sum+=int(n)
    if sum % 5 ==0:
        result.append(sum)
print("12번 답은 {}".format(len(result)))


## 문제 13.
## 6자리 이상 9자리 미만의 수를 입력으로 사용합니다.

## 수의 중앙을 기준으로 두 개의 수로 분리한 후 큰 수를 선택한다.
## - 수의 숫자개수가 홀수 개인 경우 수의 중앙 숫자를 기준으로
##   왼쪽과 오른쪽 수로 분리
## - 수의 숫자개수가 짝수 개인 경우 수를 반으로 나누어
##   왼쪽과 오른쪽 수로 분리
## 예1) 1234567 -> (123, 567) -> (567)
## 예2) 34217869 -> (3421, 7869) ->(7869)

## 입력으로 제공된 수를 더 이상 두 개의 수로 분리할 수 없을 때까지
## 과정을 반복하여 남은 최종 숫자를 구해 출력한다.
## 예1) 567 -> (5, 7) -> (7)
## 예2) 7869 -> (78, 69) -> (78) -> (7, 8) -> (8)

# my_str = input("6자리 이상 9자리 미만의 숫자를 입력하세요")
my_str = "34217869"

def bunli(str):
    tmp1 = str[0:round(len(str)/2-0.1)]
    tmp2 = str[len(str)-round(len(str)/2-0.1):]
    return max(tmp1, tmp2)
while len(my_str) != 1:
    my_str = bunli(my_str)

print("13번 최종 숫자는 {} 입니다.".format(my_str))


## 문제 14.
## 2**15 = 32768 의 각 자리수를 더하면 3 + 2 + 7 + 6 + 8 = 26 입니다.

## 2**1000의 각 자리수를 모두 더하면 얼마입니까?

my_str = str(2**1000)
sum=0
for i in my_str:
    sum+=int(i)
print("14번 답은 {}".format(sum))

## 문제 15.
## 각 부품의 생산정보가 문자열로 제공된다.
## [부품생산정보] : A7B5C4A1A8B9B3A5A8B9B1C7C1A1B3C7B9B3A7B8A1C9A8

## 각 부품정보는 부품명과 품질데이터로 구성된다.
## - A,B,C 3개의 부품이 있으며 품질은 1이상 10미만의 정수.
##   예) A7 : A부품, 품질 7

## 생산정보에서 품질이 7이상인 부품만을 순서대로 선택한다.
## [생산정보] A7B5C4A1A8B9B3A5A8B9B1C7C1A1B3C7B9B3A7B8A1C9A8
## [품질이 7이상인 부품 목록] A7A8B9A8B9C7C7B9A7B8C9A8

## 품질이 7이상인 부품들을 조립해 완성품을 만든다.
## A, B, C 세 부품이 순서대로 있을 때만 부품을 조립한다.
## A7A8B9A8B9C7C7B9A7B8C9A8 => A8B9C7, A7B8C9 2개 조립
## 조립한 부품의 목록과 전체 조립한 개수를 출력

# my_str = input("부품생산정보를 입력하십시오.")
my_str = "A7B5C4A1A8B9B3A5A8B9B1C7C1A1B3C7B9B3A7B8A1C9A8"
# 0:2 2:4 ------ [len-2]:[len]
my_slice = []
for i in range(2, len(my_str)+1, 2):
    my_slice.append(my_str[i-2:i])
# print(my_slice)

slice7 = [i for i in my_slice if int(i[1]) >= 7]
# print(slice7)

num = 0
result = []
for i in range(len(slice7)):
    try:
        if slice7[i][0] == "A" and slice7[i+1][0] == "B" and slice7[i+2][0] == "C":
            result.append((slice7[i], slice7[i+1], slice7[i+2]))
    except Exception:
        pass

for i in result:
    print("부품 목록은 {}".format(i))
print("총 개수는 {}".format(len(result)))


## 문제 16.
## n! 이라는 표기법은 n × (n − 1) × ... × 3 × 2 × 1을 뜻합니다.

## 예를 들자면 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800 이 되는데,
## 여기서 10!의 각 자리수를 더해 보면 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27 입니다.

## 100! 의 자리수를 모두 더하면 얼마입니까?

pact = 1
for i in range(1, 101):
    pact = pact*i
my_str = str(pact)
sum = 0
for n in my_str:
    sum += int(n)
print("16번 답은 {}".format(sum))

## 문제 17.
## 최소 10개 이상 최대 20개 이하의 숫자로 구성된 숫자목록이 배열 혹은 리스트 형태로 제공된다.
## 숫자목록 : 1,3,4,5,7,9,2,3,4,7

## 아래의 순서로 숫자목록의 숫자를 교환하여 재배치한다.
## 1) 숫자목록의 앞에서부터 4개의 숫자를 선택한다.
##    목록에서 숫자 선택 : [1,3,4,5],7,9,2,3,4,7
## 2) 선택된 4개의 숫자의 합을 구한다.
##    4개의 숫자 합 : [1,3,4,5],7,9,2,3,4,7 => 13
## 3) 첫 번째와 두 번째 숫자를 교환하고 세 번째와 네 번째 숫자를 교환한다.
##    숫자 교환 : [3,1,5,4],7,9,2,3,4,7
## 4) 오른쪽으로 한칸씩 이동하여 순서대로 1,2,3번 과정을 반복해 숫자목록의 숫자를 재배치한다.
## 예) [1,3,4,5],7,9,2,3,4,7 =>
##     [3,1,5,4],7,9,2,3,4,7 =>
##     3,[1,5,4,7],9,2,3,4,7 -> …

## 숫자목록의 끝까지 숫자배치를 진행할 때 선택되는 4개의 수의 최대 합을 출력

## [초기 입력 데이터]
## 1 3 4 5 7 9 2 3 4 7
## ---------------------------------------------------------------
## [선택된 4개의 수의 최대 합]: 21


## [초기 입력 데이터]
## 10 15 3 5 9 5 7 8 9 15 44 54 15 67 32 25 48 98 44 56
## ---------------------------------------------------------------
## [선택된 4개의 수의 최대 합]: 159

my_list = "1 3 4 5 7 9 2 3 4 7".split(" ")
max = 0
for i in range((len(my_list))-1):
    tmp = int(my_list[i]) + int (my_list[i+1])
    if max < tmp:
        max = tmp

print("17번 답은 {}이다.".format(max + int(my_list[0]) + int(my_list[2])))


## 문제 18.
## 어떤 대상을 순서에 따라 배열한 것을 순열이라고 합니다.
## 예를 들어 3124는 숫자 1, 2, 3, 4로 만들 수 있는 순열 중 하나입니다.

## 이렇게 만들 수 있는 모든 순열을 숫자나 문자 순으로 늘어놓은 것을
## 사전식(lexicographic) 순서라고 합니다.

## 0, 1, 2로 만들 수 있는 사전식 순열은 다음과 같습니다.
## 012   021   102   120   201   210


## 0, 1, 2, 3, 4, 5, 6, 7, 8, 9로 만들 수 있는 사전식 순열에서
## 1,000,000번째는 무엇입니까?

# print(1*2*3*4*5*6*7*8*9)            # 362880          2           725760              967680
# print(1*2*3*4*5*6*7*8)              # 40320           6           241920              997920
# print(1*2*3*4*5*6*7)                  # 5040            6         30240               999360
# print(1*2*3*4*5*6)                      #  720          2           1440                999960
                                        #  120          5           600                 999984
                                        # 24            1           24                  999996
                                        #   6           2           12
                                        #   2           2           4

# 2783915640

import itertools




## 문제 19.
## 입력으로 제공되는 숫자열에서 짝수와 홀수를 추출하여 새로운 숫자열을 생성한다.
## 1) 입력된 숫자열에서 짝수와 홀수를 순서대로 추출한다.
##    [입력] 78235169
##    [짝수 추출] 826
##    [홀수 추출] 73519
## 2) 추출된 짝수의 뒤에 추출된 홀수를 연결하여 새로운 숫자열을 생성한다.
##    [짝수와 홀수 연결] 82673519

## 결과숫자열을 앞에서부터 순서대로 뺄셈 연산 또는 덧셈 연산 한다.
## 숫자열의 앞에서 부터 순서대로 뺄셈 연산한다.
## 단, 앞선 연산 결과가 0 이하이면 그 차례에는 덧셈 연산한다.
## [결과 숫자열] 82673519
## [각 수의 연산 순서와 방법]
##   8 - 2 = 6
##   6 – 6 = 0
##   0 + 7 = 7 (앞의 연산 결과가 0 이하이므로 덧셈 연산한다.)
##   7 – 3 = 4
##   4 – 5 = -1
##  -1 + 1 = 0 (앞의 연산 결과가 0 이하이므로 덧셈 연산한다.)
##   0 + 9 = 9 (앞의 연산 결과가 0 이하이므로 덧셈 연산한다.)
## [연산 결과] 9

## [입력]: 78235169
## [출력]: 9

## [입력]: 693756874
## [출력]: 7

# my_str = input("숫자열을 입력하시오")
my_str = "693756874"
def hj(str):
    str=list(str)
    tmp1=[i for i in str if int(i) % 2 == 0]
    tmp2=[i for i in str if int(i) % 2 == 1]
    return tmp1 + tmp2

def gesan(list):
    total = int(list[0])
    for i in range(1, len(list)):
        if total > 0:
            total = total - int(list[i])
        elif total <= 0:
            total = total + int(list[i])
    return total

print(gesan(hj(my_str)))